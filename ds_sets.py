#===========================================================================
#                           Sets Module
#===========================================================================
"""
# Demonstrates accessing the builtin Set type (container)
# unordered collection of unique elements (members cann't repeat in a set)
# Sets are mutable
# Elements in set are immutable
# supports the following protocols: Container, Size, Iterable, Mutable Set.
#
# Author: Shuky Persky
#
"""

#---------------------------------------------------------------------------------
# tuple obj APIs:
# https://www.w3schools.com/python/python_sets.asp
# https://www.tutorialspoint.com/python/python_sets.htm
#---------------------------------------------------------------------------------


#================================================================================
def sets_comrehension(ds_set):
    '''Shows how to implement list comprehension

    :arg        ds_set(set)
                    just data

    :return:    none

    :raises     none
    '''

    #do it
    words = "Why there are sunny days while sometimes there are cloudy days as well".split()
    words_len = {len(word) for word in words}
    print('\n the words_len set generated by comprehension {}'.format(words_len))


    from math import factorial

    # the expression can be generated by a functiion call, based on existing list
    x0_set = {str(factorial(x)) for x in ds_set if (x>=0)}
    print('\n the set generated by comprehension based on factorial {}'.format(x0_set))

    #the expression can be generated by a functiion call, based on a range, NO filtering
    x1_set = {str(factorial(x)) for x in range(3, 11) if (x>=0)}
    print('\n the set generated by comprehension based on factorial {}'.format(x1_set))

    #the expression can be generated by a functiion call, based on a range, WITH filtering
    x2_set = {str(factorial(x)) for x in range(3, 11) if ((x%2==0) and (x>=0))}
    print('\n the set generated by comprehension based on factorial {}'.format(x2_set))




#================================================================================
def sets_iterator(ds_set):
    '''Shows how to implement list iterator

    :arg        ds_set(set)
                    just data

    :return:    none

    :raises     none
    '''

    #create iiterator
    iterator = iter(ds_set)

    while (True):
        try:
            elem = next(iterator)
            print(elem)
        except StopIteration as SI_e:
            print(f'=> {SI_e!r})')
            break

    print('\n We are done with iterator traverse')


#================================================================================
#module entry point function
def ds_sets_mdl():

    print ('\n\n ======== Sets Example Module is Running ')


    ds_set = {4, 5, 88, -12}

    ds_set_01 = set([1, 4])
    ds_set_02 = set((1, 4))


    for x in ds_set:
        print(x)

    bool_a = 5 in ds_set
    bool_b = 5 not in ds_set

    ds_set.add(56)      # added since not in set
    ds_set.add(88)      # added since not in set

    ds_set.update([533, 544])
    ds_set.update ((633, 644))

    if 533 in ds_set:
        ds_set.remove(533)

    if 1533 in ds_set:
        ds_set.remove (1533)

    #no need to assure membership
    #before removing member from set
    ds_set.discard(533)
    ds_set.discard(56)


    #create a set
    other_set = ds_set.copy()   # create d differenr set object
    another_set = set(ds_set)   # create d differenr set object

    #sets operation
    set_a = set((1, 2, 4, 6, 8))
    set_b = set ((2, 6, 9, 33))

    a_b_union = set_a.union(set_b)
    a_b_intersection = set_a.intersection(set_b)

    a_diff_b = set_a.difference (set_b)
    b_diff_a = set_b.difference (set_a)
    a_b_mutual_diff = set_a.symmetric_difference (set_b)

    #check if oine set is subset of another
    a_b_intersection.issubset(a_b_union)
    a_b_union.issuperset(a_b_intersection)

    #check if sets have empty intersection
    a_diff_b.isdisjoint(b_diff_a)

    print('\n-------------------------')

    sets_comrehension(ds_set)

    print('\n-------------------------')

    sets_iterator(ds_set)

    print ('\n ----------- Sets Module is Done >>>> ')